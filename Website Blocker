import time
import platform
import os
import getpass
import tkinter as tk
from tkinter import ttk, messagebox
from plyer import notification  # Install plyer library using: pip install plyer

class WebsiteBlocker:
    def __init__(self, root):
        self.root = root
        self.root.title("Website Blocker")
        self.root.geometry("400x400")

        # Password protection
        self.password_label = ttk.Label(root, text="Enter Password:")
        self.password_label.pack(pady=10)

        self.password_entry = ttk.Entry(root, show="*")
        self.password_entry.pack(pady=10)

        self.submit_button = ttk.Button(root, text="Submit", command=self.check_password)
        self.submit_button.pack(pady=10)

        # Scheduling
        self.start_label = ttk.Label(root, text="Start Hour:")
        self.start_label.pack(pady=10)

        self.start_hour_entry = ttk.Entry(root)
        self.start_hour_entry.pack(pady=10)

        self.end_label = ttk.Label(root, text="End Hour:")
        self.end_label.pack(pady=10)

        self.end_hour_entry = ttk.Entry(root)
        self.end_hour_entry.pack(pady=10)

        # Whitelist
        self.whitelist_label = ttk.Label(root, text="Whitelisted Websites (comma-separated):")
        self.whitelist_label.pack(pady=10)

        self.whitelist_entry = ttk.Entry(root)
        self.whitelist_entry.pack(pady=10)

        self.block_button = ttk.Button(root, text="Block Websites", command=self.schedule_blocking)
        self.block_button.pack(pady=10)

    def check_password(self):
        # Simple password check for demonstration purposes
        password = self.password_entry.get()
        if password == "securepassword":
            self.show_main_window()
        else:
            messagebox.showerror("Error", "Invalid password")

    def show_main_window(self):
        # Destroy password protection elements and show main window
        self.password_label.destroy()
        self.password_entry.destroy()
        self.submit_button.destroy()
        self.start_label.pack(pady=10)
        self.start_hour_entry.pack(pady=10)
        self.end_label.pack(pady=10)
        self.end_hour_entry.pack(pady=10)
        self.whitelist_label.pack(pady=10)
        self.whitelist_entry.pack(pady=10)
        self.block_button.pack(pady=10)

    def block_websites(self, websites):
        with open(self.get_hosts_path(), 'r') as hosts_file:
            lines = hosts_file.readlines()

        with open(self.get_hosts_path(), 'a') as hosts_file:
            for website in websites:
                entry = f'127.0.0.1 {website}\n'
                if entry not in lines:
                    hosts_file.write(entry)

    def unblock_websites(self, websites):
        with open(self.get_hosts_path(), 'r') as hosts_file:
            lines = hosts_file.readlines()

        with open(self.get_hosts_path(), 'w') as hosts_file:
            for line in lines:
                if not any(website in line for website in websites):
                    hosts_file.write(line)

    def get_hosts_path(self):
        system = platform.system().lower()
        if system == 'windows':
            return r'C:\Windows\System32\drivers\etc\hosts'
        elif system == 'linux' or system == 'darwin':
            return '/etc/hosts'
        else:
            raise NotImplementedError(f'Unsupported operating system: {system}')

    def schedule_blocking(self):
        try:
            start_hour = int(self.start_hour_entry.get())
            end_hour = int(self.end_hour_entry.get())
            blocked_websites = ["example.com", "facebook.com"]  # Add your list of websites to block
            whitelist = [site.strip() for site in self.whitelist_entry.get().split(',')]

            while True:
                current_time = time.localtime(time.time())
                if start_hour <= current_time.tm_hour < end_hour:
                    self.block_websites(blocked_websites)
                else:
                    self.unblock_websites(blocked_websites)

                # Notify the user about the blocking state
                self.notify_blocking_state(start_hour, end_hour)

                time.sleep(60)  # Check every minute

        except ValueError:
            messagebox.showerror("Error", "Invalid input for start/end hour. Please enter integers.")

    def notify_blocking_state(self, start_hour, end_hour):
        current_hour = time.localtime(time.time()).tm_hour
        if start_hour <= current_hour < end_hour:
            notification_title = "Website Blocker"
            notification_message = "Websites are currently blocked."
        else:
            notification_title = "Website Blocker"
            notification_message = "Websites are now accessible."

        notification.notify(
            title=notification_title,
            message=notification_message,
            app_icon=None,  # e.g., 'C:\\icon_32x32.ico'
            timeout=10,  # seconds
        )

if __name__ == "__main__":
    root = tk.Tk()
    app = WebsiteBlocker(root)
    root.mainloop()
